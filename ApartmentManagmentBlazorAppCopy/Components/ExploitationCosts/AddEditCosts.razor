@page "/{apartmentId:long}/editAddCosts/{costId:long}"
@page "/{apartmentId:long}/editAddCosts"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using ApartmentManagmentBlazorAppCopy.Models
@using ApartmentManagmentBlazorAppCopy.Requests.ApartmentRequests
@using ApartmentManagmentBlazorAppCopy.Services
@using System.Runtime.InteropServices.JavaScript
@inject IExploitationCostsServices CostServices
@inject IRommateServices RoommateServices
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<link href="css/formDispaly.css" rel="stylesheet" />

<Div Position="Position.Absolute.Top.Is50.Start.Is50.Translate.Middle">
    
<Blazorise.Card Background="Background.Body" Class="infobox">
    <Blazorise.CardTitle Size = "3">
        @if (CostId != 0)
        {
            <Blazorise.Text>Add new cost</Blazorise.Text>
        }
        else
        {
            <Blazorise.Text>Edit cost</Blazorise.Text>
        }
    </Blazorise.CardTitle>
    <Blazorise.CardBody>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Month</FieldLabel>
                        <Select @bind-SelectedValue="@CostForm.Month">
                            @foreach (var month in Mounths)
                            {
                                <SelectItem value="@month"> @month </SelectItem>
                            }
                        </Select>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Whole amount</FieldLabel>
                        <NumericEdit @bind-Value="@CostForm.WholeAmount" Placeholder="Amount">
                            <Feedback>
                                <ValidationSuccess>Amount is good.</ValidationSuccess>
                                <ValidationError>Enter amount</ValidationError>
                            </Feedback>
                        </NumericEdit>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Deadline</FieldLabel>
                        <DateEdit @bind-Date="@CostForm.DeadLine" Placeholder="Deadline">
                            <Feedback>
                                <ValidationSuccess>Deadline is good.</ValidationSuccess>
                                <ValidationError>Enter deadline</ValidationError>
                            </Feedback>
                        </DateEdit>
                    </Field>
                </Validation>
                    <Field>
                        <FieldLabel>Type</FieldLabel>
                        <Select @bind-SelectedValue="@CostForm.Type">
                            @foreach (var type in Types)
                            {
                                <SelectItem value="@type"> @type </SelectItem>
                            }
                        </Select>
                    </Field>
                <Field>
                    <Check TValue="bool" Checked="@CostForm.CustomBreakdown" CheckedChanged="@OnRememberMeChanged">Custom breakdown</Check>
                </Field>
                @if (CostForm.CustomBreakdown)
                {
                    if (CostForm.CustomCostBreakDown is not null)
                    {
                        @foreach (var breakdown in CostForm.CustomCostBreakDown)
                        {
                            <Row>
                            <Field>
                                <FieldLabel>Name</FieldLabel>
                                <Text>
                                    @breakdown.RoommateName
                                </Text>
                            </Field>
                            <Field>
                                <FieldLabel>Whole amount</FieldLabel>
                                <NumericEdit @bind-Value="@breakdown.Share" Placeholder="Share">
                                    <Feedback>
                                        <ValidationSuccess>Share is good.</ValidationSuccess>
                                        <ValidationError>Enter share</ValidationError>
                                    </Feedback>
                                </NumericEdit>
                            </Field>
                            <Field>
                                <Check TValue="bool" Checked="@breakdown.IsPaid">Paid</Check>
                            </Field>
                            </Row>
                        }
                    }
                    else
                    {
                        @foreach (var roommate in RoommatesParts)
                        {
                            <Row>
                                <Column>
                                    <Field>
                                        <FieldLabel>Name</FieldLabel>
                                        <FieldBody>
                                            <p>@roommate.RoommateName</p>
                                        </FieldBody>
                                    </Field>
                                </Column>
                                <Column>
                                    <Field>
                                        <FieldLabel>Share</FieldLabel>
                                        <FieldBody>
                                            <NumericEdit @bind-Value="@roommate.Share" Placeholder="Share">
                                                <Feedback>
                                                    <ValidationSuccess>Share is good.</ValidationSuccess>
                                                    <ValidationError>Enter share</ValidationError>
                                                </Feedback>
                                            </NumericEdit>
                                        </FieldBody>
                                    </Field>
                                </Column>
                                <Column>
                                    <Field>
                                        <FieldLabel>Paid</FieldLabel>
                                        <FieldBody>
                                            <Row>
                                                <Check TValue="bool" Checked="@roommate.IsPaid"></Check>
                                            </Row>
                                        </FieldBody>
                                    </Field>
                                </Column>
                            </Row>
                        }
                    }
                }
            <Blazorise.Button Clicked="@SubmitForm" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary">Submit</Blazorise.Button>
            <Blazorise.Button Color="Color.Danger" Clicked="@Cancel">Cancel</Blazorise.Button>
    </Blazorise.CardBody>
</Blazorise.Card>
</Div>


@code {
    [SupplyParameterFromForm] protected AddExploitationCostRequest CostForm { get; set; } = null!;
    [Parameter] public long ApartmentId { get; set; }
    [Parameter] public long CostId { get; set; }
    [SupplyParameterFromForm] IList<RoommatePart> RoommatesParts { get; set; } = null!;

    protected override void OnInitialized()
    {
        CostForm ??= new();
        RoommatesParts ??= new List<RoommatePart>();
        InitizalizeRoommatesParts();
    }

    void InitizalizeRoommatesParts()
    {
        var list = GetRoommates(ApartmentId);
        foreach (var roommate in list)
        {
            RoommatesParts.Add(new RoommatePart()
            {
                RoommateName = roommate.Name,
                UserId = roommate.UserId
            });
        }
    }
    void OnRememberMeChanged( bool value )
    {
        CostForm.CustomBreakdown = value;
    }
    private async Task SubmitForm()
    {
        var roommates = GetRoommates(ApartmentId);

        if (CostId != 0)
        {
            await CostServices.UpdateExploitationCost(ApartmentId, CostId, roommates, CostForm);
        }
        else
        {
            CostForm.CustomCostBreakDown = RoommatesParts;
            await CostServices.AddExploitationCosts(ApartmentId, roommates, CostForm);
        }

        Cancel();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CostId != 0)
        {
            var rent = CostServices.GetCost(ApartmentId, CostId);
            var addChoreRequest = new AddExploitationCostRequest()
            {
                CustomCostBreakDown = rent.CustomCostBreakDown,
                WholeAmount = rent.WholeAmount,
                Type = rent.Type,
                DeadLine = rent.DeadLine,
                EndDate = rent.EndDate,
                CustomBreakdown = rent.CustomBreakdown,
                Month = rent.Month,
                EvenBreakDown = rent.EvenBreakDown,
                Year = rent.Year
            };
            CostForm = addChoreRequest;
        }
        CostForm.DeadLine = new DateOnly(DateTimeOffset.Now.Year,DateTimeOffset.Now.Month,DateTimeOffset.Now.Day);        
        CostForm.Year = DateTimeOffset.Now.Year.ToString();


    }
    IList<Roommate> GetRoommates(long apartmentId)
    {
        return RoommateServices.GetRoommates(apartmentId);
    }

    void Cancel()
    {
        NavigationManager.NavigateTo($"{ApartmentId}/costs");
    }

    List<string> Types = new List<string>()
    {
        "Type",
        "Water",
        "Electricity",
        "Gas",
        "Internet",
        "CooperativeCost",
        "Other"
    };

    List<string> Mounths = new List<string>()
    {
        "Month",
        "January", 
        "February", 
        "March",
        "April", 
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    };

}