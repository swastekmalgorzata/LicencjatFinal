@page "/{apartmentId:long}/costs"
@using ApartmentManagmentBlazorAppCopy.Services
@using ApartmentManagmentBlazorAppCopy.Models
@inject IExploitationCostsServices CostsServices
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<link href="css/formDispaly.css" rel="stylesheet" xmlns="http://www.w3.org/1999/html"/>

<Card Background="Background.Body" Class="infobox" Position="Position.Absolute.Top.Is50.Start.Is50.Translate.Middle">
    <h3>Exploitation costs</h3>
        <Div>
            <Table Hoverable>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Month</TableHeaderCell>
                        <TableHeaderCell>Amount</TableHeaderCell>
                        <TableHeaderCell>Type</TableHeaderCell>
                        <TableHeaderCell>Deadline</TableHeaderCell>
                        <TableHeaderCell>Breakdown</TableHeaderCell>
                        <TableHeaderCell>Edit</TableHeaderCell>
                        <TableHeaderCell>Delete</TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @foreach (var cost in Costs)
                    {
                        <TableRow>
                            <TableRowCell>@cost.Month</TableRowCell>
                            <TableRowCell>@cost.WholeAmount</TableRowCell>
                            <TableRowCell>@cost.Type</TableRowCell>
                            <TableRowCell>@cost.DeadLine</TableRowCell>
                            <TableRowCell>
                                @foreach (var breakDown in cost.CustomCostBreakDown)
                                {
                                    <Field>
                                        @breakDown.RoommateName @breakDown.Share
                                        <Check TValue="bool" CheckedChanged="@(() => MarkIsPaid(cost.Id, breakDown.RoommateName, breakDown.IsPaid))" Checked="@breakDown.IsPaid"></Check>
                                    </Field>
                                }
                            </TableRowCell>
                            <TableRowCell>
                                <Button Clicked="@(() => EditRent(cost.Id))" Color="Color.Primary">Edit</Button>
                            </TableRowCell>
                            <TableRowCell>
                                <Button Clicked="@(() => DeleteRent(cost.Id))" Color="Color.Danger">Delete</Button>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </Div>
    <Button Clicked="@AddNewRent" Color="Color.Primary">Add new cost</Button>
</Card>

@code {
    [Parameter] public long ApartmentId { get; set; }
    private IList<ExploitationCost>? Costs;

    protected override void OnInitialized()
    {
        try
        {
            Costs = GetRentsFromService();
        }
        catch (Exception ex)
        {
            // Handle exception, e.g., display an error message
        }
    }

    private IList<ExploitationCost>? GetRentsFromService()
    {
        return CostsServices.GetExploitationCosts(ApartmentId);
    }

    void EditRent(long costId)
    {
        NavigationManager.NavigateTo($"{ApartmentId}/editAddCosts/{costId}");
    }

    private async Task DeleteRent(long rentId)
    {
        await CostsServices.DeleteExploitationCost(ApartmentId, rentId);

    }

    void AddNewRent()
    {
        NavigationManager.NavigateTo($"{ApartmentId}/editAddCosts");
    }

    async Task MarkIsPaid(long rentId, string name, bool isPaid)
    {
        await CostsServices.MarkIsPaid(rentId, name, !isPaid);
    }
    
}