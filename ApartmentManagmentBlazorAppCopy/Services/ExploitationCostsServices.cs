using System.Collections;
using ApartmentManagmentBlazorAppCopy.Models;
using ApartmentManagmentBlazorAppCopy.Requests.ApartmentRequests;
using Microsoft.EntityFrameworkCore;

namespace ApartmentManagmentBlazorAppCopy.Services
{
    public interface IExploitationCostsServices
    {
        Task<ExploitationCost> AddExploitationCosts(long apartmentId, IList<Roommate> Rommates, AddExploitationCostRequest request);
        Task UpdateExploitationCost(long apartmentId, long exploitationCostId, IList<Roommate> Rommates, AddExploitationCostRequest request);
        IList<ExploitationCost> GetExploitationCosts(long apartmentId);
        Task DeleteExploitationCost(long apartmentId, long exploitationCostId);
        Task MarkIsPaid(long id, string name, bool isPaid);
        ExploitationCost GetCost(long apartmentId, long costId);
        IList<ExploitationCost> GetApproachingDeadline(long apartmentId);
        IList<RoommatePart> GetToPay(long ApartmentId, string userId);

    }
    public class ExploitationCostsServices : IExploitationCostsServices
    {
        private readonly ApartmentsContext apartmentsContext;
        public ExploitationCostsServices(ApartmentsContext apartmentsContext)
        {
            this.apartmentsContext = apartmentsContext;
        }

        public IList<RoommatePart> GetToPay(long ApartmentId,string userId)
        {
            var test = apartmentsContext.ExploitationCosts.FirstOrDefault(a => a.ApartmentId == ApartmentId).CustomCostBreakDown
                .ToList();
            return test.Where(t => t.UserId == userId && t.IsPaid == false).ToList();
        }
        public IList<ExploitationCost> GetApproachingDeadline(long apartmentId)
        {
            var date = DateTimeOffset.Now.AddDays(14);
            var date2 = new DateOnly(date.Year, date.Month, date.Day);
            return apartmentsContext.ExploitationCosts.Where(c => c.ApartmentId == apartmentId && c.DeadLine >= date2 ).ToList();
        }
        public async Task<ExploitationCost> AddExploitationCosts(long apartmentId, IList<Roommate> Rommates, AddExploitationCostRequest request)
        {
            if (request.CustomBreakdown is false)
            {                    
                request.CustomCostBreakDown = new List<RoommatePart>();

                foreach (var roommate in Rommates)
                {
                    request.CustomCostBreakDown.Add(new RoommatePart()
                    {
                        IsPaid = false,
                        Share = request.WholeAmount / Rommates.Count(),
                        UserId = roommate.UserId,
                        RoommateName = roommate.Name
                    });
                }
            }
            
            var newExploitationCost = new ExploitationCost()
            {
                ApartmentId = apartmentId,
                Type = request.Type,
                WholeAmount = request.WholeAmount,
                CustomBreakdown = request.CustomBreakdown,
                Month = request.Month,
                Year = request.Year,
                CustomCostBreakDown = request.CustomCostBreakDown,
                EvenBreakDown = request.EvenBreakDown,
                DeadLine = request.DeadLine,
                EndDate = request.EndDate
            };

            apartmentsContext.Add(newExploitationCost);
            await apartmentsContext.SaveChangesAsync();

            return newExploitationCost;
        }

        public async Task UpdateExploitationCost(long apartmentId, long exploitationCostId, IList<Roommate> Rommates, AddExploitationCostRequest request)
        {
            var existingExploitationCost = await apartmentsContext.ExploitationCosts
                .FirstOrDefaultAsync(ec => ec.ApartmentId == apartmentId && ec.Id == exploitationCostId);

            if (existingExploitationCost == null)
            {
                throw new Exception("Not found");
            }
            
            if (request.CustomBreakdown is false)
            {
                foreach (var roommate in Rommates)
                {
                    request.CustomCostBreakDown = new List<RoommatePart>();
                    request.CustomCostBreakDown.Add(new RoommatePart()
                    {
                        IsPaid = false,
                        Share = request.WholeAmount / Rommates.Count(),
                        UserId = roommate.UserId
                    });
                }
            }
            existingExploitationCost.Type = request.Type;
            existingExploitationCost.WholeAmount = request.WholeAmount;
            existingExploitationCost.CustomBreakdown = request.CustomBreakdown;
            existingExploitationCost.Month = request.Month;
            existingExploitationCost.Year = request.Year;
            existingExploitationCost.CustomCostBreakDown = request.CustomCostBreakDown;
            existingExploitationCost.EvenBreakDown = request.EvenBreakDown;
            existingExploitationCost.DeadLine = request.DeadLine;
            existingExploitationCost.EndDate = request.EndDate;

            // Save changes to the database
            await apartmentsContext.SaveChangesAsync();
        }

        public IList<ExploitationCost> GetExploitationCosts(long apartmentId)
        {
            return apartmentsContext.ExploitationCosts.Where(r => r.ApartmentId == apartmentId).ToList();
        }
        public async Task DeleteExploitationCost(long apartmentId, long exploitationCostId)
        {
            var cost = apartmentsContext.ExploitationCosts.FirstOrDefault(r => r.Id == exploitationCostId);
            if (cost is null) throw new Exception("Not found");
            apartmentsContext.Remove(cost);
            await apartmentsContext.SaveChangesAsync();
        }
        public async Task MarkIsPaid(long id, string name, bool isPaid)
        {
            var cost = apartmentsContext.ExploitationCosts.FirstOrDefault(r => r.Id == id);
            if (cost is null || cost.CustomCostBreakDown is null) throw new Exception("Cost error");
            
            cost.CustomCostBreakDown!.FirstOrDefault(cb => cb.RoommateName == name)!.IsPaid = isPaid;
            await apartmentsContext.SaveChangesAsync();
        }

        public ExploitationCost GetCost(long apartmentId, long costId)
        {
            var cost = apartmentsContext.ExploitationCosts.FirstOrDefault(r => r.Id == costId);
            if (cost is null) throw new Exception("Not found");
            return cost;
        }
    }
}
